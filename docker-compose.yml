version: '3.8'

services:
  # API Server - Main application server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: agentic-marimo-api
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/agentic_marimo
      - REDIS_URL=redis://redis:6379
      - MARIMO_SERVER_URL=http://marimo:8080
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./data:/app/data
      - ./marimo_notebooks:/app/marimo_notebooks
    depends_on:
      - postgres
      - redis
      - marimo
    networks:
      - agentic-marimo-network
    restart: unless-stopped

  # Marimo Server - Reactive notebook runtime
  marimo:
    build:
      context: .
      dockerfile: Dockerfile.marimo
    container_name: agentic-marimo-runtime
    ports:
      - "8080:8080"
      - "8081:8081"  # WebSocket port
    environment:
      - MARIMO_SERVER_PORT=8080
      - MARIMO_WEBSOCKET_PORT=8081
      - MARIMO_ALLOW_REMOTE=true
      - MARIMO_MAX_NOTEBOOKS=20
      - MARIMO_NOTEBOOK_DIR=/notebooks
      - MARIMO_DATA_DIR=/data
    volumes:
      - ./marimo_notebooks:/notebooks
      - ./data:/data
      - marimo_workspace:/workspace
    networks:
      - agentic-marimo-network
    restart: unless-stopped

  # Agent Workers - Process agent tasks
  agent-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - WORKER_TYPE=agent
      - REDIS_URL=redis://redis:6379
      - MARIMO_SERVER_URL=http://marimo:8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/agentic_marimo
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MAX_CONCURRENT_TASKS=5
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./data:/app/data
      - ./marimo_notebooks:/app/marimo_notebooks
    depends_on:
      - redis
      - postgres
      - marimo
    networks:
      - agentic-marimo-network
    deploy:
      replicas: 3
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: agentic-marimo-postgres
    environment:
      - POSTGRES_DB=agentic_marimo
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - agentic-marimo-network
    restart: unless-stopped

  # Redis - Caching and task queue
  redis:
    image: redis:7-alpine
    container_name: agentic-marimo-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - agentic-marimo-network
    restart: unless-stopped

  # Nginx - Reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: agentic-marimo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_cache:/var/cache/nginx
    depends_on:
      - api
      - marimo
    networks:
      - agentic-marimo-network
    restart: unless-stopped

  # Celery Beat - Scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: agentic-marimo-scheduler
    command: celery -A src.core.tasks beat -l info
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/agentic_marimo
    volumes:
      - ./src:/app/src
      - ./config:/app/config
    depends_on:
      - redis
      - postgres
    networks:
      - agentic-marimo-network
    restart: unless-stopped

  # Flower - Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: agentic-marimo-flower
    command: celery -A src.core.tasks flower
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    depends_on:
      - redis
      - celery-beat
    networks:
      - agentic-marimo-network
    restart: unless-stopped

  # Grafana - Monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-marimo-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - agentic-marimo-network
    restart: unless-stopped

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-marimo-prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - agentic-marimo-network
    restart: unless-stopped

  # MinIO - S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: agentic-marimo-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - agentic-marimo-network
    restart: unless-stopped

  # Jupyter Lab - Alternative notebook interface
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: agentic-marimo-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-jupyter}
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    networks:
      - agentic-marimo-network
    restart: unless-stopped

networks:
  agentic-marimo-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  marimo_workspace:
  nginx_cache:
  grafana_data:
  prometheus_data:
  minio_data: